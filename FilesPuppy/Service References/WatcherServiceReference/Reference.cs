//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FilesPuppy.WatcherServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WatcherServiceReference.IWatcher")]
    public interface IWatcher {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/GetData", ReplyAction="http://tempuri.org/IWatcher/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/GetData", ReplyAction="http://tempuri.org/IWatcher/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWatcher/GetDataUsingDataContractResponse")]
        WcfServiceFileSystemWatcher.CompositeType GetDataUsingDataContract(WcfServiceFileSystemWatcher.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IWatcher/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(WcfServiceFileSystemWatcher.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        WcfServiceFileSystemWatcher.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/GetLastFiles", ReplyAction="http://tempuri.org/IWatcher/GetLastFilesResponse")]
        string[] GetLastFiles();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/GetLastFiles", ReplyAction="http://tempuri.org/IWatcher/GetLastFilesResponse")]
        System.IAsyncResult BeginGetLastFiles(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetLastFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/GetLastFilesByDirectory", ReplyAction="http://tempuri.org/IWatcher/GetLastFilesByDirectoryResponse")]
        string[] GetLastFilesByDirectory(string root);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/GetLastFilesByDirectory", ReplyAction="http://tempuri.org/IWatcher/GetLastFilesByDirectoryResponse")]
        System.IAsyncResult BeginGetLastFilesByDirectory(string root, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetLastFilesByDirectory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/AddFile", ReplyAction="http://tempuri.org/IWatcher/AddFileResponse")]
        bool AddFile(string root, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/AddFile", ReplyAction="http://tempuri.org/IWatcher/AddFileResponse")]
        System.IAsyncResult BeginAddFile(string root, string filepath, System.AsyncCallback callback, object asyncState);
        
        bool EndAddFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/AddFiles", ReplyAction="http://tempuri.org/IWatcher/AddFilesResponse")]
        int AddFiles(string root, string[] filepaths);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/AddFiles", ReplyAction="http://tempuri.org/IWatcher/AddFilesResponse")]
        System.IAsyncResult BeginAddFiles(string root, string[] filepaths, System.AsyncCallback callback, object asyncState);
        
        int EndAddFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/InsertGetFileTimeLog", ReplyAction="http://tempuri.org/IWatcher/InsertGetFileTimeLogResponse")]
        bool InsertGetFileTimeLog(string root);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/InsertGetFileTimeLog", ReplyAction="http://tempuri.org/IWatcher/InsertGetFileTimeLogResponse")]
        System.IAsyncResult BeginInsertGetFileTimeLog(string root, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertGetFileTimeLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/DeleteFile", ReplyAction="http://tempuri.org/IWatcher/DeleteFileResponse")]
        bool DeleteFile(string file);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/DeleteFile", ReplyAction="http://tempuri.org/IWatcher/DeleteFileResponse")]
        System.IAsyncResult BeginDeleteFile(string file, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/ScanDirectory", ReplyAction="http://tempuri.org/IWatcher/ScanDirectoryResponse")]
        void ScanDirectory(string p);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/ScanDirectory", ReplyAction="http://tempuri.org/IWatcher/ScanDirectoryResponse")]
        System.IAsyncResult BeginScanDirectory(string p, System.AsyncCallback callback, object asyncState);
        
        void EndScanDirectory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/ScanDirectorys", ReplyAction="http://tempuri.org/IWatcher/ScanDirectorysResponse")]
        void ScanDirectorys(string[] dirs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/ScanDirectorys", ReplyAction="http://tempuri.org/IWatcher/ScanDirectorysResponse")]
        System.IAsyncResult BeginScanDirectorys(string[] dirs, System.AsyncCallback callback, object asyncState);
        
        void EndScanDirectorys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWatcher/GetFiles", ReplyAction="http://tempuri.org/IWatcher/GetFilesResponse")]
        string[] GetFiles(string dirname);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWatcher/GetFiles", ReplyAction="http://tempuri.org/IWatcher/GetFilesResponse")]
        System.IAsyncResult BeginGetFiles(string dirname, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetFiles(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWatcherChannel : FilesPuppy.WatcherServiceReference.IWatcher, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WcfServiceFileSystemWatcher.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WcfServiceFileSystemWatcher.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastFilesByDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastFilesByDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertGetFileTimeLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertGetFileTimeLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WatcherClient : System.ServiceModel.ClientBase<FilesPuppy.WatcherServiceReference.IWatcher>, FilesPuppy.WatcherServiceReference.IWatcher {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastFilesDelegate;
        
        private EndOperationDelegate onEndGetLastFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastFilesByDirectoryDelegate;
        
        private EndOperationDelegate onEndGetLastFilesByDirectoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastFilesByDirectoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFileDelegate;
        
        private EndOperationDelegate onEndAddFileDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFilesDelegate;
        
        private EndOperationDelegate onEndAddFilesDelegate;
        
        private System.Threading.SendOrPostCallback onAddFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertGetFileTimeLogDelegate;
        
        private EndOperationDelegate onEndInsertGetFileTimeLogDelegate;
        
        private System.Threading.SendOrPostCallback onInsertGetFileTimeLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileDelegate;
        
        private EndOperationDelegate onEndDeleteFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginScanDirectoryDelegate;
        
        private EndOperationDelegate onEndScanDirectoryDelegate;
        
        private System.Threading.SendOrPostCallback onScanDirectoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginScanDirectorysDelegate;
        
        private EndOperationDelegate onEndScanDirectorysDelegate;
        
        private System.Threading.SendOrPostCallback onScanDirectorysCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilesDelegate;
        
        private EndOperationDelegate onEndGetFilesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilesCompletedDelegate;
        
        public WatcherClient() {
        }
        
        public WatcherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WatcherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WatcherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WatcherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<GetLastFilesCompletedEventArgs> GetLastFilesCompleted;
        
        public event System.EventHandler<GetLastFilesByDirectoryCompletedEventArgs> GetLastFilesByDirectoryCompleted;
        
        public event System.EventHandler<AddFileCompletedEventArgs> AddFileCompleted;
        
        public event System.EventHandler<AddFilesCompletedEventArgs> AddFilesCompleted;
        
        public event System.EventHandler<InsertGetFileTimeLogCompletedEventArgs> InsertGetFileTimeLogCompleted;
        
        public event System.EventHandler<DeleteFileCompletedEventArgs> DeleteFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ScanDirectoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ScanDirectorysCompleted;
        
        public event System.EventHandler<GetFilesCompletedEventArgs> GetFilesCompleted;
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return this.BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public WcfServiceFileSystemWatcher.CompositeType GetDataUsingDataContract(WcfServiceFileSystemWatcher.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataUsingDataContract(WcfServiceFileSystemWatcher.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WcfServiceFileSystemWatcher.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WcfServiceFileSystemWatcher.CompositeType composite = ((WcfServiceFileSystemWatcher.CompositeType)(inValues[0]));
            return this.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            WcfServiceFileSystemWatcher.CompositeType retVal = this.EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(WcfServiceFileSystemWatcher.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(WcfServiceFileSystemWatcher.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        public string[] GetLastFiles() {
            return base.Channel.GetLastFiles();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLastFiles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastFiles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetLastFiles(System.IAsyncResult result) {
            return base.Channel.EndGetLastFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetLastFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLastFiles(callback, asyncState);
        }
        
        private object[] OnEndGetLastFiles(System.IAsyncResult result) {
            string[] retVal = this.EndGetLastFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastFilesCompleted(object state) {
            if ((this.GetLastFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastFilesCompleted(this, new GetLastFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastFilesAsync() {
            this.GetLastFilesAsync(null);
        }
        
        public void GetLastFilesAsync(object userState) {
            if ((this.onBeginGetLastFilesDelegate == null)) {
                this.onBeginGetLastFilesDelegate = new BeginOperationDelegate(this.OnBeginGetLastFiles);
            }
            if ((this.onEndGetLastFilesDelegate == null)) {
                this.onEndGetLastFilesDelegate = new EndOperationDelegate(this.OnEndGetLastFiles);
            }
            if ((this.onGetLastFilesCompletedDelegate == null)) {
                this.onGetLastFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastFilesDelegate, null, this.onEndGetLastFilesDelegate, this.onGetLastFilesCompletedDelegate, userState);
        }
        
        public string[] GetLastFilesByDirectory(string root) {
            return base.Channel.GetLastFilesByDirectory(root);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLastFilesByDirectory(string root, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastFilesByDirectory(root, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetLastFilesByDirectory(System.IAsyncResult result) {
            return base.Channel.EndGetLastFilesByDirectory(result);
        }
        
        private System.IAsyncResult OnBeginGetLastFilesByDirectory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string root = ((string)(inValues[0]));
            return this.BeginGetLastFilesByDirectory(root, callback, asyncState);
        }
        
        private object[] OnEndGetLastFilesByDirectory(System.IAsyncResult result) {
            string[] retVal = this.EndGetLastFilesByDirectory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastFilesByDirectoryCompleted(object state) {
            if ((this.GetLastFilesByDirectoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastFilesByDirectoryCompleted(this, new GetLastFilesByDirectoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastFilesByDirectoryAsync(string root) {
            this.GetLastFilesByDirectoryAsync(root, null);
        }
        
        public void GetLastFilesByDirectoryAsync(string root, object userState) {
            if ((this.onBeginGetLastFilesByDirectoryDelegate == null)) {
                this.onBeginGetLastFilesByDirectoryDelegate = new BeginOperationDelegate(this.OnBeginGetLastFilesByDirectory);
            }
            if ((this.onEndGetLastFilesByDirectoryDelegate == null)) {
                this.onEndGetLastFilesByDirectoryDelegate = new EndOperationDelegate(this.OnEndGetLastFilesByDirectory);
            }
            if ((this.onGetLastFilesByDirectoryCompletedDelegate == null)) {
                this.onGetLastFilesByDirectoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastFilesByDirectoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastFilesByDirectoryDelegate, new object[] {
                        root}, this.onEndGetLastFilesByDirectoryDelegate, this.onGetLastFilesByDirectoryCompletedDelegate, userState);
        }
        
        public bool AddFile(string root, string filepath) {
            return base.Channel.AddFile(root, filepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFile(string root, string filepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFile(root, filepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddFile(System.IAsyncResult result) {
            return base.Channel.EndAddFile(result);
        }
        
        private System.IAsyncResult OnBeginAddFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string root = ((string)(inValues[0]));
            string filepath = ((string)(inValues[1]));
            return this.BeginAddFile(root, filepath, callback, asyncState);
        }
        
        private object[] OnEndAddFile(System.IAsyncResult result) {
            bool retVal = this.EndAddFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFileCompleted(object state) {
            if ((this.AddFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileCompleted(this, new AddFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileAsync(string root, string filepath) {
            this.AddFileAsync(root, filepath, null);
        }
        
        public void AddFileAsync(string root, string filepath, object userState) {
            if ((this.onBeginAddFileDelegate == null)) {
                this.onBeginAddFileDelegate = new BeginOperationDelegate(this.OnBeginAddFile);
            }
            if ((this.onEndAddFileDelegate == null)) {
                this.onEndAddFileDelegate = new EndOperationDelegate(this.OnEndAddFile);
            }
            if ((this.onAddFileCompletedDelegate == null)) {
                this.onAddFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileDelegate, new object[] {
                        root,
                        filepath}, this.onEndAddFileDelegate, this.onAddFileCompletedDelegate, userState);
        }
        
        public int AddFiles(string root, string[] filepaths) {
            return base.Channel.AddFiles(root, filepaths);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddFiles(string root, string[] filepaths, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFiles(root, filepaths, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddFiles(System.IAsyncResult result) {
            return base.Channel.EndAddFiles(result);
        }
        
        private System.IAsyncResult OnBeginAddFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string root = ((string)(inValues[0]));
            string[] filepaths = ((string[])(inValues[1]));
            return this.BeginAddFiles(root, filepaths, callback, asyncState);
        }
        
        private object[] OnEndAddFiles(System.IAsyncResult result) {
            int retVal = this.EndAddFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFilesCompleted(object state) {
            if ((this.AddFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFilesCompleted(this, new AddFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFilesAsync(string root, string[] filepaths) {
            this.AddFilesAsync(root, filepaths, null);
        }
        
        public void AddFilesAsync(string root, string[] filepaths, object userState) {
            if ((this.onBeginAddFilesDelegate == null)) {
                this.onBeginAddFilesDelegate = new BeginOperationDelegate(this.OnBeginAddFiles);
            }
            if ((this.onEndAddFilesDelegate == null)) {
                this.onEndAddFilesDelegate = new EndOperationDelegate(this.OnEndAddFiles);
            }
            if ((this.onAddFilesCompletedDelegate == null)) {
                this.onAddFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFilesCompleted);
            }
            base.InvokeAsync(this.onBeginAddFilesDelegate, new object[] {
                        root,
                        filepaths}, this.onEndAddFilesDelegate, this.onAddFilesCompletedDelegate, userState);
        }
        
        public bool InsertGetFileTimeLog(string root) {
            return base.Channel.InsertGetFileTimeLog(root);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertGetFileTimeLog(string root, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertGetFileTimeLog(root, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertGetFileTimeLog(System.IAsyncResult result) {
            return base.Channel.EndInsertGetFileTimeLog(result);
        }
        
        private System.IAsyncResult OnBeginInsertGetFileTimeLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string root = ((string)(inValues[0]));
            return this.BeginInsertGetFileTimeLog(root, callback, asyncState);
        }
        
        private object[] OnEndInsertGetFileTimeLog(System.IAsyncResult result) {
            bool retVal = this.EndInsertGetFileTimeLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertGetFileTimeLogCompleted(object state) {
            if ((this.InsertGetFileTimeLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertGetFileTimeLogCompleted(this, new InsertGetFileTimeLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertGetFileTimeLogAsync(string root) {
            this.InsertGetFileTimeLogAsync(root, null);
        }
        
        public void InsertGetFileTimeLogAsync(string root, object userState) {
            if ((this.onBeginInsertGetFileTimeLogDelegate == null)) {
                this.onBeginInsertGetFileTimeLogDelegate = new BeginOperationDelegate(this.OnBeginInsertGetFileTimeLog);
            }
            if ((this.onEndInsertGetFileTimeLogDelegate == null)) {
                this.onEndInsertGetFileTimeLogDelegate = new EndOperationDelegate(this.OnEndInsertGetFileTimeLog);
            }
            if ((this.onInsertGetFileTimeLogCompletedDelegate == null)) {
                this.onInsertGetFileTimeLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertGetFileTimeLogCompleted);
            }
            base.InvokeAsync(this.onBeginInsertGetFileTimeLogDelegate, new object[] {
                        root}, this.onEndInsertGetFileTimeLogDelegate, this.onInsertGetFileTimeLogCompletedDelegate, userState);
        }
        
        public bool DeleteFile(string file) {
            return base.Channel.DeleteFile(file);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFile(string file, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFile(file, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteFile(System.IAsyncResult result) {
            return base.Channel.EndDeleteFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string file = ((string)(inValues[0]));
            return this.BeginDeleteFile(file, callback, asyncState);
        }
        
        private object[] OnEndDeleteFile(System.IAsyncResult result) {
            bool retVal = this.EndDeleteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileCompleted(object state) {
            if ((this.DeleteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileAsync(string file) {
            this.DeleteFileAsync(file, null);
        }
        
        public void DeleteFileAsync(string file, object userState) {
            if ((this.onBeginDeleteFileDelegate == null)) {
                this.onBeginDeleteFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteFile);
            }
            if ((this.onEndDeleteFileDelegate == null)) {
                this.onEndDeleteFileDelegate = new EndOperationDelegate(this.OnEndDeleteFile);
            }
            if ((this.onDeleteFileCompletedDelegate == null)) {
                this.onDeleteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileDelegate, new object[] {
                        file}, this.onEndDeleteFileDelegate, this.onDeleteFileCompletedDelegate, userState);
        }
        
        public void ScanDirectory(string p) {
            base.Channel.ScanDirectory(p);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginScanDirectory(string p, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginScanDirectory(p, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndScanDirectory(System.IAsyncResult result) {
            base.Channel.EndScanDirectory(result);
        }
        
        private System.IAsyncResult OnBeginScanDirectory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string p = ((string)(inValues[0]));
            return this.BeginScanDirectory(p, callback, asyncState);
        }
        
        private object[] OnEndScanDirectory(System.IAsyncResult result) {
            this.EndScanDirectory(result);
            return null;
        }
        
        private void OnScanDirectoryCompleted(object state) {
            if ((this.ScanDirectoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ScanDirectoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ScanDirectoryAsync(string p) {
            this.ScanDirectoryAsync(p, null);
        }
        
        public void ScanDirectoryAsync(string p, object userState) {
            if ((this.onBeginScanDirectoryDelegate == null)) {
                this.onBeginScanDirectoryDelegate = new BeginOperationDelegate(this.OnBeginScanDirectory);
            }
            if ((this.onEndScanDirectoryDelegate == null)) {
                this.onEndScanDirectoryDelegate = new EndOperationDelegate(this.OnEndScanDirectory);
            }
            if ((this.onScanDirectoryCompletedDelegate == null)) {
                this.onScanDirectoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnScanDirectoryCompleted);
            }
            base.InvokeAsync(this.onBeginScanDirectoryDelegate, new object[] {
                        p}, this.onEndScanDirectoryDelegate, this.onScanDirectoryCompletedDelegate, userState);
        }
        
        public void ScanDirectorys(string[] dirs) {
            base.Channel.ScanDirectorys(dirs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginScanDirectorys(string[] dirs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginScanDirectorys(dirs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndScanDirectorys(System.IAsyncResult result) {
            base.Channel.EndScanDirectorys(result);
        }
        
        private System.IAsyncResult OnBeginScanDirectorys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] dirs = ((string[])(inValues[0]));
            return this.BeginScanDirectorys(dirs, callback, asyncState);
        }
        
        private object[] OnEndScanDirectorys(System.IAsyncResult result) {
            this.EndScanDirectorys(result);
            return null;
        }
        
        private void OnScanDirectorysCompleted(object state) {
            if ((this.ScanDirectorysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ScanDirectorysCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ScanDirectorysAsync(string[] dirs) {
            this.ScanDirectorysAsync(dirs, null);
        }
        
        public void ScanDirectorysAsync(string[] dirs, object userState) {
            if ((this.onBeginScanDirectorysDelegate == null)) {
                this.onBeginScanDirectorysDelegate = new BeginOperationDelegate(this.OnBeginScanDirectorys);
            }
            if ((this.onEndScanDirectorysDelegate == null)) {
                this.onEndScanDirectorysDelegate = new EndOperationDelegate(this.OnEndScanDirectorys);
            }
            if ((this.onScanDirectorysCompletedDelegate == null)) {
                this.onScanDirectorysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnScanDirectorysCompleted);
            }
            base.InvokeAsync(this.onBeginScanDirectorysDelegate, new object[] {
                        dirs}, this.onEndScanDirectorysDelegate, this.onScanDirectorysCompletedDelegate, userState);
        }
        
        public string[] GetFiles(string dirname) {
            return base.Channel.GetFiles(dirname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFiles(string dirname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFiles(dirname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetFiles(System.IAsyncResult result) {
            return base.Channel.EndGetFiles(result);
        }
        
        private System.IAsyncResult OnBeginGetFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dirname = ((string)(inValues[0]));
            return this.BeginGetFiles(dirname, callback, asyncState);
        }
        
        private object[] OnEndGetFiles(System.IAsyncResult result) {
            string[] retVal = this.EndGetFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilesCompleted(object state) {
            if ((this.GetFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilesCompleted(this, new GetFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilesAsync(string dirname) {
            this.GetFilesAsync(dirname, null);
        }
        
        public void GetFilesAsync(string dirname, object userState) {
            if ((this.onBeginGetFilesDelegate == null)) {
                this.onBeginGetFilesDelegate = new BeginOperationDelegate(this.OnBeginGetFiles);
            }
            if ((this.onEndGetFilesDelegate == null)) {
                this.onEndGetFilesDelegate = new EndOperationDelegate(this.OnEndGetFiles);
            }
            if ((this.onGetFilesCompletedDelegate == null)) {
                this.onGetFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilesDelegate, new object[] {
                        dirname}, this.onEndGetFilesDelegate, this.onGetFilesCompletedDelegate, userState);
        }
    }
}
